{"ast":null,"code":"import { createStore } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nvar saveState = function saveState(state) {\n  try {\n    var serialisedState = JSON.stringify(state);\n    window.localStorage.setItem('app_state', serialisedState);\n  } catch (_unused) {\n    (function (error) {\n      console.log(error);\n    });\n  }\n};\n\nvar loadState = function loadState() {\n  try {\n    // Load the data saved in localStorage, against the key 'app_state'\n    var serialisedState = window.localStorage.getItem('app_state'); // Passing undefined to createStore will result in our app getting the default state\n    // If no data is saved, return undefined\n\n    if (!serialisedState) return undefined; // De-serialise the saved state, and return it.\n\n    return JSON.parse(serialisedState);\n  } catch (err) {\n    // Return undefined if localStorage is not available, \n    // or data could not be de-serialised, \n    // or there was some other error\n    return undefined;\n  }\n};\n\nvar oldState = loadState();\nvar store = createStore(rootReducer, oldState);\nstore.subscribe(function () {\n  saveState(store.getState());\n});\nexport default store;","map":{"version":3,"sources":["/Users/wangjiaying/Desktop/CIS 550 Databases & Info Systems /DatabaseProject/Frontend/src/redux/store.js"],"names":["createStore","rootReducer","saveState","state","serialisedState","JSON","stringify","window","localStorage","setItem","error","console","log","loadState","getItem","undefined","parse","err","oldState","store","subscribe","getState"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AACzB,MAAI;AACA,QAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB;AACAI,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,EAAyCL,eAAzC;AACH,GAHD,CAGE,gBAAM;AAAE,eAAAM,KAAK,EAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAFS;AAER;AACL,CAPD;;AASA,IAAMG,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,MAAI;AACA;AACA,QAAMT,eAAe,GAAGG,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,WAA5B,CAAxB,CAFA,CAIA;AACA;;AACA,QAAI,CAACV,eAAL,EAAsB,OAAOW,SAAP,CANtB,CAQA;;AACA,WAAOV,IAAI,CAACW,KAAL,CAAWZ,eAAX,CAAP;AACH,GAVD,CAUE,OAAOa,GAAP,EAAY;AACV;AACA;AACA;AACA,WAAOF,SAAP;AACH;AACJ,CAjBD;;AAkBA,IAAMG,QAAQ,GAAGL,SAAS,EAA1B;AACA,IAAMM,KAAK,GAAGnB,WAAW,CAACC,WAAD,EAAciB,QAAd,CAAzB;AAEAC,KAAK,CAACC,SAAN,CAAgB,YAAM;AAClBlB,EAAAA,SAAS,CAACiB,KAAK,CAACE,QAAN,EAAD,CAAT;AACH,CAFD;AAIA,eAAeF,KAAf","sourcesContent":["import { createStore } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst saveState = (state) => {\n    try {\n        const serialisedState = JSON.stringify(state);\n        window.localStorage.setItem('app_state', serialisedState);\n    } catch { error => {\n        console.log(error);\n    }}\n};\n\nconst loadState = () => {\n    try {\n        // Load the data saved in localStorage, against the key 'app_state'\n        const serialisedState = window.localStorage.getItem('app_state');\n\n        // Passing undefined to createStore will result in our app getting the default state\n        // If no data is saved, return undefined\n        if (!serialisedState) return undefined;\n\n        // De-serialise the saved state, and return it.\n        return JSON.parse(serialisedState);\n    } catch (err) {\n        // Return undefined if localStorage is not available, \n        // or data could not be de-serialised, \n        // or there was some other error\n        return undefined;\n    }\n};\nconst oldState = loadState();\nconst store = createStore(rootReducer, oldState);\n\nstore.subscribe(() => {\n    saveState(store.getState());\n});\n\nexport default store;"]},"metadata":{},"sourceType":"module"}